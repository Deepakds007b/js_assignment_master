Service Description:
This service is a backend for a sports app.
It has 3 entities - Sport, Tour and Match.
Each sport has multiple tours and each tour has multiple matches.

------------------------------------------------------------------------------------------------------------------------

Problem 1
Endpoint /tour/matches returns all the matches for a given tour name.
The endpoint latency increases linearly with the number of tours. Modify the endpoint to increase the performance.

Problem 2
Modify the endpoint /sport/tour/match to also return match's id, startTime and format

Problem 3
Requirement: News Support for Matches and Tours
Functional Requirements:
    1. News can be created for a match or a tour.
    2. Each news created for a match also belongs to the corresponding tour.
    3. Each news created for a tour also belongs to the corresponding sport.
Technical Requirements:
    1. Create an endpoint to create news.
    2. Create an endpoint to fetch news by match id
    3. Create an endpoint to fetch news by tour id
    4. Create an endpoint to fetch news by sport id
News Model
{
    title: string,
    description: string
}

********************************** Added Info ********************************************

1. Installed jest for writing test cases (Use npm test -> If this does not work try installing "npm install --save-dev jest")
2. Added various functions in controllers with parameter validations
3. Created a new Model "News" to store news details with unique constraint on (sportId, tourId, matchId) 
    and added foreign key reference to tours and matches model
4. To create a news use ednpoint -> POST "http://localhost:3000/news"
    Each news created must fall under one valid sport and one valid tour
    Request body description 
        - title (string) - Mandatory 50 char length
        - description (string) - Mandatory 255 char length
        - sportId (numeric string value) - Mandatory
        - tourId (numeric string value) - Mandatory
        - matchId (numeric string value) - Optional
5. Created an endpoint to fetch news by match id -> GET "http://localhost:3000/news/match?matchId=1"
6. Created an endpoint to fetch news by tour id -> GET "http://localhost:3000/news/tour?tourId=1"
7. Created an endpoint to fetch news by sport id -> GET "http://localhost:3000/news/sport?sportId=1"
8. Updated functionality for GET "http://localhost:3000/tour/matches" ednpoint by introducing 
    two new indexes which reduced the time complexity from linear to logrithmic
        1. CREATE INDEX idx_matches_tourId ON matches(tourId);
        2. CREATE INDEX idx_tours_name ON tours(name);
9. Added Porjection attribute match's id, startTime and format in SQL query to fetch and show details